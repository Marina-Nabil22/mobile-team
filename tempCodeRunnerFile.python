import pygame
import sys
from queue import PriorityQueue

# Define the colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (128, 128, 128)

# Define the dimensions of the game board
WIDTH = 500
HEIGHT = 500

# Define the dimensions of each tile
TILE_WIDTH = 100
TILE_HEIGHT = 100

# Define the font to use for the tile numbers
FONT = pygame.font.SysFont("arial", 50)

# Define the initial state of the puzzle
INITIAL_STATE = [[1, 2, 3], [4, 5, 6], [7, 8, None]]

# Define the goal state of the puzzle
GOAL_STATE = [[1, 2, 3], [4, 5, 6], [7, 8, None]]

# Define the A* search algorithm
def astar(start, goal):
    frontier = PriorityQueue()
    frontier.put((0, start))
    came_from = {start: None}
    cost_so_far = {start: 0}

    while not frontier.empty():
        _, current = frontier.get()

        if current == goal:
            break

        for next_state in get_neighbors(current):
            new_cost = cost_so_far[current] + 1
            if next_state not in cost_so_far or new_cost < cost_so_far[next_state]:
                cost_so_far[next_state] = new_cost
                priority = new_cost + heuristic(next_state, goal)
                frontier.put((priority, next_state))
                came_from[next_state] = current

    return came_from

# Define the heuristic function
def heuristic(state, goal):
    count = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != goal[i][j]:
                count += 1
    return count

# Define the function to get the neighbors of a state
def get_neighbors(state):
    neighbors = []
    blank_row, blank_col = get_blank_position(state)

    # Move the blank space up
    if blank_row > 0:
        new_state = [row[:] for row in state]
        new_state[blank_row][blank_col], new_state[blank_row - 1][blank_col] = new_state[blank_row - 1][blank_col], new_state[blank_row][blank_col]
        neighbors.append(new_state)

    # Move the blank space down
    if blank_row < 2:
        new_state = [row[:] for row in state]
        new_state[blank_row][blank_col], new_state[blank_row + 1][blank_col] 
